package com.assignment.flow.server.controller;

import com.assignment.flow.server.entity.FixedExtension;
import com.assignment.flow.server.entity.CustomExtension;
import com.assignment.flow.server.service.ExtensionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController // 
@RequestMapping("/api/extensions") // 고정확장자 및 커스텀확장자 관련 메서드 도메인 설정
@CrossOrigin(origins = "*")
public class ExtensionController {
	
    private final ExtensionService extensionService;

    @Autowired
    public ExtensionController(ExtensionService extensionService) {
        this.extensionService = extensionService;
    }

    // 고정 확장자 전체 조회
    @GetMapping("/fixed")
    public List<FixedExtension> getFixedExtensions() {
        return extensionService.getAllFixedExtensions();
    }

    // 커스텀 확장자 전체 조회
    @GetMapping("/custom")
    public List<CustomExtension> getCustomExtensions() {
        return extensionService.getAllCustomExtensions();
    }

    // 고정 확장자 상태 변경
    @PutMapping("/fixed/{extensionName}/status")
    public void updateFixedStatus(
            @PathVariable("extensionName") String extensionName,
            @RequestParam("enabled") boolean enabled) {
        extensionService.updateFixedExtensionStatus(extensionName, enabled);
    }

    // 커스텀 확장자 추가
    @PostMapping("/custom")
    public CustomExtension addCustomExtension(@RequestParam("extension") String extension) {
        return extensionService.addCustomExtension(extension);
    }

    // 커스텀 확장자 삭제
    @DeleteMapping("/custom/{extensionName}")
    public void deleteCustomExtension(@PathVariable("extensionName") String extensionName) {
        extensionService.deleteCustomExtension(extensionName);
    }
}